plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.4.0x'
}

wrapper {
    gradleVersion = '8.11.1'
}

ext {
    releaseDest = new File(project.buildDir, "releases")
    generatedJavaSrc = file("src/gen/java/")
}

allprojects {
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
    group = 'net.dean.jraw'
    version = '0.9.0'

    repositories {
        mavenCentral()
    }

    compileJava.options.encoding = 'UTF-8'
}

dependencies {
    def okHttpVersion = '3.1.2'
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okHttpVersion"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.6.0'
    implementation 'com.google.guava:guava:19.0'
    implementation 'org.slf4j:slf4j-api:1.7.13'
    testImplementation 'org.slf4j:slf4j-simple:1.7.13'
    testImplementation 'org.testng:testng:6.9.10'
    testImplementation 'net.sourceforge.htmlunit:htmlunit:2.19'
}

// Add the generated source to the main Java source directories
sourceSets.main.java.srcDir ext.generatedJavaSrc

task fatJar(type: Jar, dependsOn: assemble) {
    archiveClassifier.set('fat')
    destinationDirectory.set(releaseDest)
    from(
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) },
            sourceSets.main.output
    )
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    destinationDirectory.set(releaseDest)
    from javadoc.destinationDir  // Keep this as is
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    destinationDirectory.set(releaseDest)
    from sourceSets.main.allSource
}

task renamePom(dependsOn: 'generatePomFileForMavenPublication') {
    doLast {
        println(file('build/publications/maven/pom-default.xml'))
        file('build/publications/maven/pom-default.xml').renameTo("build/publications/maven/JRAW-${version}.pom")
    }
}

task release(type: Jar, dependsOn: ['fatJar', 'javadocJar', 'sourcesJar', 'renamePom']) {
    from sourceSets.main.output
    destinationDirectory.set(releaseDest)
}

javadoc {
    def overrideVersion = System.properties.'javadoc-version'
    def version = overrideVersion != null ? overrideVersion : project.version
    title = "${project.name} $version API"
}

test {
    useTestNG()

    testLogging {
        // Show stderr and stdout (useful for exceptions)
        showStandardStreams = true
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor.className}.${descriptor.name}")
    }
}

jacocoTestReport {
    reports {
        xml.required.set(true) // coveralls depends on XML reports
        html.required.set(true)
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

defaultTasks "test"
